		self.assertTrue(TestLexer.test("""\"first line\nsecond line\"""","\"first line\nsecond line\",<EOF>",148))
        
        self.assertTrue(TestLexer.test("""\"This is the new line char \n\"""","""\"This is the new line syntax \n\",<EOF>""",145))
    
        self.assertTrue(TestLexer.test(" \"string with strange character \p \"","Illegal Escape: \"string with strange character \p \",<EOF>",167))
        self.assertTrue(TestLexer.test(" "," ,<EOF>",168))
        self.assertTrue(TestLexer.test(" "," ,<EOF>",169))
        self.assertTrue(TestLexer.test(" "," ,<EOF>",170))

input = """class A{
        void main(){float m;
        m:=   4*5/3\6+1      ;
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 254))











    def test_if_else(self):
        input = """class A{
        void main(){
        bool x;
        if x then x:=True;
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 271))
        input = """class A{
        void main(){
        bool x;
        if x then io.writeInt(100);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 272))
        input = """class A{
        void main(){
        bool x;
        if x then io.writeBool(x);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 273))
        input = """class A{
        void main(){
        bool x;
        if x then x:=False;
        else x:=True;
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 274))
        input = """class A{
        void main(){
        bool x;
        if x then if(this.m==7)then x:=True;
        else io.writeInt(100);
        else io.writeInt(1);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 275))
        input = """class A{
        void main(){
        bool x;
        if x then for i:=1 to 2 do io.writeInt(i);
        else io.writeInt(2);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 276))
        input = """class A{
        void main(){
        bool x;
        if x then x.m(5);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 277))
        input = """class A{
        void main(){
        bool x;
        if x then x:={1,2,3};
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 278))
        input = """class A{
        void main(){
        bool x;
        if x then io.readInt(x);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 279))
        input = """class A{
        void main(){
        bool x;
        if x then io.readBool(x);
        else io.writeBool(x);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 280))

    def test_mixed_statement(self):
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 281))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 282))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 283))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 284))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 285))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 286))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 287))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 288))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 289))
        input = """"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 290))

    def test_sample(self):
        """C++ to BKOOL"""
        """find the first repeating element in an array"""
        input = """int main(){
  int[100] arr, n, i;
  io.writeString( "Enter number of elements: ");
  io.readInt(n);
  for i := 0 to  n do
    io.readInt(arr[i]);
  for i := 0 to  n do
    for j := i+1 to  n do
      if arr[i] == arr[j]{
        io.writeString("\nFirst repeating integer is ");
         io.writeInt(arr[i]);
      }
}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 291))
        """P of triangle"""
        input = """class A{
        int main(){
        io.writeInt(io.readInt(x)+io.readInt(x)+io.readInt(x));
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 292))

        """Sum of n"""
        input = """class A{
        int main(){
        int x,sum;
        sum:=0;
        io.readInt(x);
        for i:=1 to x do sum:=sum+i;
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 293))
        """sum of two ints"""
        input = """class A{
        int main(){
        int x,y;
        io.readInt(x);
        io.readInt(y);
        io.writeInt(x+y);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 294))
        """Calculate any thing"""
        input = """class A{
        int main(){
        int x,y;
        io.readInt(x);
        io.readInt(y);
        io.writeInt(x+y*100/9\5.3);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 295))
        """array to int"""
        input = """class A{
        int main(){
        int[3] x;
        int sum; sum:=0;
        for i:=1 to n do sum := sum*10+io.readInt(x[i]);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 296))
        """flip sign"""
        input = """class A{
        int main(){
        int x;
        io.readInt(x);
        io.writeInt(-x);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 297))
        """mod 3"""
        input = """class A{
        int main(){
        int x;
        io.readInt(x);
        io.writeInt(x%3);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 298))
        """rec class"""
        input = """class rec{
        int w,b;
        int main(){
        io.readInt(this.w);
        io.readInt(this.b);
        io.writeInt(w*b);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 299))
        """write your name"""
        input = """class A{
        int main(){
        string x;
        io.readString(x);
        io.writeString(\"Your name is\");
        io.writeString(x);
        }}"""
        expect = "successful"
        self.assertTrue(TestParser.test(input, expect, 300))

   




